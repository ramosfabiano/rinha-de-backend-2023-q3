version: '3.8'
services:

  # banco de dados
  postgres:
    container_name: postgres
    image: docker.io/postgres
    hostname: postgres
    network_mode: host
    env_file:
      - ./postgres/vars.env
    volumes:
      - ./postgres/config.sql:/docker-entrypoint-initdb.d/config.sql
      - ./postgres/table.sql:/docker-entrypoint-initdb.d/table.sql
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '1.3GB'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  # cache
  redis:
    container_name: redis
    image: docker.io/redis
    hostname: redis
    network_mode: host   
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/etc/redis-custom.conf     
    command: redis-server /etc/redis-custom.conf
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '0.5GB'      

  # app instancia 01
  app01:
    container_name: app01
    build: 
      context: ./
      dockerfile: app/Dockerfile.app
    hostname: app01
    network_mode: host  
    env_file:
      - ./postgres/vars.env
      - ./redis/vars.env
    environment:
      APP_PORT: 8080 
    ports:
      - 8080:8080 
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy      
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '0.4GB'

  # app instancia 02
  app02:
    container_name: app02
    build: 
      context: ./
      dockerfile: app/Dockerfile.app
    hostname: app02
    network_mode: host  
    env_file:
      - ./postgres/vars.env
      - ./redis/vars.env
    environment:
      APP_PORT: 8081
    ports:
      - 8081:8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy        
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '0.4GB'

  # balanceador de carga
  nginx:
    container_name: nginx
    image: docker.io/nginx
    hostname: nginx
    network_mode: host    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      app01:
        condition: service_healthy
      app02:
        condition: service_healthy
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '0.4GB'

    